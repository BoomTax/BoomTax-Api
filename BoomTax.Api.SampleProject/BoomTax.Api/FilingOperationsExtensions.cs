// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using BoomTax.Api.SampleProject;
using BoomTax.Api.SampleProject.Models;
using Microsoft.Rest;

namespace BoomTax.Api.SampleProject
{
    public static partial class FilingOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Filing Delete(this IFilingOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFilingOperations)s).DeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Filing> DeleteAsync(this IFilingOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BoomTax.Api.SampleProject.Models.Filing> result = await operations.DeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Filing GetFiling(this IFilingOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFilingOperations)s).GetFilingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Filing> GetFilingAsync(this IFilingOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BoomTax.Api.SampleProject.Models.Filing> result = await operations.GetFilingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        public static IList<Filing> GetFilings(this IFilingOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFilingOperations)s).GetFilingsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Filing>> GetFilingsAsync(this IFilingOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<BoomTax.Api.SampleProject.Models.Filing>> result = await operations.GetFilingsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='filingTypeId'>
        /// Required.
        /// </param>
        /// <param name='payerName'>
        /// Required.
        /// </param>
        public static Filing Post(this IFilingOperations operations, int filingTypeId, string payerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFilingOperations)s).PostAsync(filingTypeId, payerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the BoomTax.Api.SampleProject.IFilingOperations.
        /// </param>
        /// <param name='filingTypeId'>
        /// Required.
        /// </param>
        /// <param name='payerName'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Filing> PostAsync(this IFilingOperations operations, int filingTypeId, string payerName, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BoomTax.Api.SampleProject.Models.Filing> result = await operations.PostWithOperationResponseAsync(filingTypeId, payerName, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
